#!/usr/bin/python

import json
import sys
import re
import copy
import os

BLUE = '\033[94m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

class colortext:
  def __init__(self, text, color):
    self.text = text
    self.color = color
  def __len__(self):
    return len(self.text)
  def __str__(self):
    return BOLD + self.color + self.text + ENDC
def green(s):
  return colortext(s, GREEN)
def red(s):
  return colortext(s, RED)

def displayTag(t):
  return t

def json_careful_loads(s):
  try:
    return json.loads(s)
  except Exception as e:
    sys.stderr.write("[ERR] Error while parsing json: {}\n".format(e))
    sys.exit(1)

def json_careful_readlines(f):
  return [ json_careful_loads(line.rstrip('\n')) for line in f ]

def safeInsert(dict, key, value):
  if key not in dict:
    dict[key] = value
  else:
    sys.stderr.write("[WARN] Key {} is already in use; trying _{} instead.\n".format(key))
    safeInsert(dict, "_" + key, value)

def reCompile(exp):
  return re.compile(exp, re.MULTILINE)

# def parseCommaInteger(s):
#   return int(s.replace(",", ""))

statsPatterns = \
  [ ("time", int, reCompile(r"^wall\s+(\d+)$"))
  , ("space", int, reCompile(r"^\s*Maximum resident set size \(kbytes\): (\d+).*$"))
  # , ("working-set", parseCommaInteger, reCompile(r"^max bytes live: (.*) bytes$"))
  ]

renameConfig = {
  'mlton': 'mlton',
  'mpl': 'mpl',
  'mpl-cc': 'mpl-cc',
  'mlton-working-set': 'mlton-working-set'
}

foundTags = set()
foundProcs = set()

def parseStats(row):
  newRow = copy.deepcopy(row)
  for (name, convert, pat) in statsPatterns:
    m = pat.search(newRow['stdout'] + newRow['stderr'])
    if m:
      safeInsert(newRow, name, convert(m.group(1)))
  newRow['procs'] = int(newRow.get('procs', '1'))
  newRow['config'] = renameConfig[row['config']]

  try:
    newRow['space'] = float(newRow['space'])
  except KeyError:
    pass

  try:
    newRow['time'] = float(newRow['elapsed'])
  except KeyError:
    pass

  foundTags.add(newRow['tag'])
  foundProcs.add(newRow['procs'])

  return newRow

def findTrials(data, config, tag, procs):
  result = []
  for row in data:
    if (row['config'] == config and \
        row['tag'] == tag and \
        row['procs'] == procs):
      result.append(row)
  return result

def averageTime(data, config, tag, procs):
  tms = [ r['time'] for r in findTrials(data, config, tag, procs) if 'time' in r ]

  # cut out the max time to account for possible file IO slowdown
  # (this should only happen the first time the file is loaded)
  if len(tms) > 1:
    maxt = max(tms)
    tms = [ t for t in tms if t != maxt ]

  try:
    return sum(tms) / len(tms)
  except:
    return None

def averageSpace(data, config, tag, procs):
  sp = [ r['space'] for r in findTrials(data, config, tag, procs) if 'space' in r ]
  try:
    return sum(sp) / len(sp)
  except:
    return None

# def workingSetSize(data, tag):
#   sp = [ r['working-set'] for r in findTrials(data, "mlton-working-set", tag, 1) if 'working-set' in r ]
#   try:
#     return sp[0] / 1000.0  # working-set is in bytes; divide by 1000 to get KB
#   except:
#     raise ValueError('Error processing working-set size of tag={}'.format(tag))

def tm(t):
  if t is None:
    return None
  # if t > 10.0:
  #   return int(round(t))
  try:
    if t >= 1.0:
      return round(t, 1)
    elif t >= 0.1:
      return round(t, 2)
    else:
      return round(t, 3)
  except TypeError:
    print ("[ERR] Got type error trying to round {}".format(repr(t)))
    return None

def noLeadZero(t):
  if t is None:
    return None
  if t < 1:
    return str(t).replace('0', '', 1)
  return str(t)

def sp(kb):
  if kb is None:
    return None
  num = (kb * 1024) / 1000 # convert from kiB to kB
  for unit in ['K','M','G']:
    if num < 1000:
      return "%3.1f %s" % (num, unit)
    num = num / 1000
  return "%3.1f %s" % (num, 'T')

# =========================================================================

def makeline(row, widths, align):
  bits = []
  i = 0
  while i < len(row):
    j = i+1
    while j < len(row) and (row[j] is None):
      j += 1
    availableWidth = sum(widths[i:j]) + 3*(j-i-1)
    s = str(row[i])
    w = " " * (availableWidth - len(row[i]))
    aa = align(i)
    if aa == "l":
      ln = s + w
    elif aa == "r":
      ln = w + s
    elif aa == "c":
      ln = w[:len(w)/2] + s + w[len(w)/2:]
    else:
      raise ValueError("invalid formatter: {}".format(aa))
    bits.append(ln)
    i = j
  return "   ".join(bits)

def table(rows, align=None):
  numCols = max(len(row) for row in rows if not isinstance(row, str))

  widths = [0] * numCols
  for row in rows:
    # string rows are used for formatting
    if isinstance(row, str):
      continue

    i = 0
    while i < len(row):
      j = i+1
      while j < len(row) and (row[j] is None):
        j += 1
      # rw = len(stripANSI(str(row[i])))
      # rw = len(str(row[i]))
      rw = len(row[i])
      for k in xrange(i, j):
        w = (rw / (j-i)) + (1 if k < rw % (j-i) else 0)
        widths[k] = max(widths[k], w)
      i = j

  totalWidth = sum(widths) + 3*(numCols-1)

  def aa(i):
    try:
      return align(i)
    except:
      return "l"

  output = []
  for row in rows:
    if row == "-" or row == "=":
      output.append(row * totalWidth)
      continue
    elif isinstance(row, str):
      raise ValueError("bad row: {}".format(row))
    output.append(makeline(row, widths, aa))

  return "\n".join(output)

# =========================================================================

def mostRecentResultsFile(ws=False):
  files = os.listdir("results")
  pattern = r'\d{6}-\d{6}'
  if ws:
    pattern = r'ws-' + pattern
  # A bit of a hack. Filenames are ...YYMMDD-hhmmss, so lexicographic string
  # comparison is correct for finding the most recent (i.e. maximum) file
  mostRecent = max(p for p in files if re.match(pattern, p))
  return mostRecent

if len(sys.argv) > 1:
  timingsFile = sys.argv[1]
else:
  print("[INFO] no results file argument; finding most recent")
  try:
    mostRecent = mostRecentResultsFile()
  except:
    print("[ERR] could not find most recent results file\n " + \
          "  check that these are formatted as 'YYMMSS-hhmmss'")
    sys.exit(1)
  timingsFile = os.path.join('results', mostRecent)

if len(sys.argv) > 2:
  workingSetFile = sys.argv[2]
else:
  print("[INFO] no working-set file argument; finding most recent")
  try:
    mostRecent = mostRecentResultsFile(ws=True)
  except:
    print("[ERR] could not find most recent results/ws-* file\n " + \
          "  check that these are formatted as 'ws-YYMMSS-hhmmss'")
    sys.exit(1)
  workingSetFile = os.path.join('results', mostRecent)

print("[INFO] reading {}\n".format(timingsFile))
with open(timingsFile, 'r') as data:
  resultsData = json_careful_readlines(data)
print("[INFO] reading {}\n".format(workingSetFile))
with open(workingSetFile, 'r') as data:
  workingSetData = json_careful_readlines(data)
WS = [ parseStats(row) for row in workingSetData ]
D = [ parseStats(row) for row in resultsData ]
P = sorted(list(foundProcs))
maxp = max(foundProcs)

orderedTags = sorted(list(foundTags))

def defaultAlign(i):
  return "r" if i == 0 else "l"

headers = ['Benchmark', 'MLton', 'MPL(1)', 'MPL/CC(1)', 'MPL({})'.format(maxp), 'MPL/CC({})'.format(maxp)]
tt = [headers, "="]
for tag in orderedTags:
  thisRow = [tag,
             tm(averageTime(D, 'mlton', tag, 1)),
             tm(averageTime(D, 'mpl', tag, 1)),
             tm(averageTime(D, 'mpl-cc', tag, 1)),
             tm(averageTime(D, 'mpl', tag, maxp)),
             tm(averageTime(D, 'mpl-cc', tag, maxp))
            ]
  thisRow = [thisRow[0]] + [str(x) if x is not None else "--" for x in thisRow[1:]]
  tt.append(thisRow)

print("TIMINGS")
print(table(tt, defaultAlign))
print("")

headers = ['Benchmark', 'WS', 'MLton', 'MPL(1)', 'MPL/CC(1)', 'MPL({})'.format(maxp), 'MPL/CC({})'.format(maxp)]
tt = [headers, "="]
for tag in orderedTags:
  thisRow = [tag,
             sp(averageSpace(WS, 'mlton-working-set', tag, 1)),
             sp(averageSpace(D, 'mlton', tag, 1)),
             sp(averageSpace(D, 'mpl', tag, 1)),
             sp(averageSpace(D, 'mpl-cc', tag, 1)),
             sp(averageSpace(D, 'mpl', tag, maxp)),
             sp(averageSpace(D, 'mpl-cc', tag, maxp))
            ]
  thisRow = [ (x if x is not None else "--") for x in thisRow ]
  tt.append(thisRow)

print("SPACE (MAX RESIDENCY)")
print(table(tt, defaultAlign))
print("")

# percent difference (b-a)/|a|
def pcd(b, a):
  try:
    xx = 100.0 * (b-a) / abs(a)
    result = ("+" if xx >= 0.0 else "") + ("{:.1f}%".format(xx))
    if xx > 0.0:
      return red(result)
    else:
      return result
  except:
    return None

def sd(x, y):
  try:
    return x / y
  except:
    return None

header1 = ["", "Overhead", None, "Speedup({})".format(maxp), None, "Blowup(1)", None, "Blowup({})".format(maxp), None]
header2 = ['Benchmark',
           'MPL',
           'MPL/CC',
           'MPL',
           'MPL/CC',
           'MPL',
           'MPL/CC',
           'MPL',
           'MPL/CC']
tt = [header1, header2, "="]
for tag in orderedTags:
  tMLton = tm(averageTime(D, 'mlton', tag, 1))
  tMPL1 = tm(averageTime(D, 'mpl', tag, 1))
  tMPLp = tm(averageTime(D, 'mpl', tag, maxp))
  tMPLcc1 = tm(averageTime(D, 'mpl-cc', tag, 1))
  tMPLccp = tm(averageTime(D, 'mpl-cc', tag, maxp))
  rMLton = averageSpace(D, 'mlton', tag, 1)
  rMPL1 = averageSpace(D, 'mpl', tag, 1)
  rMPLp = averageSpace(D, 'mpl', tag, maxp)
  rMPLcc1 = averageSpace(D, 'mpl-cc', tag, 1)
  rMPLccp = averageSpace(D, 'mpl-cc', tag, maxp)

  overhead   = tm(sd(tMPL1, tMLton))
  overheadcc = tm(sd(tMPLcc1, tMLton))
  speedup    = tm(sd(tMLton, tMPLp))
  speedupcc  = tm(sd(tMLton, tMPLccp))
  blowup1    = tm(sd(rMPL1, rMLton))
  blowupcc1  = tm(sd(rMPLcc1, rMLton))
  blowupp    = tm(sd(rMPLp, rMLton))
  blowupccp  = tm(sd(rMPLccp, rMLton))

  row = [tag, overhead, overheadcc, speedup, speedupcc, blowup1, blowupcc1, blowupp, blowupccp]
  row = [row[0]] + map(lambda x: "{:.1f}".format(x) if x is not None else "--", row[1:])
  tt.append(row)

print("COMPARISON WITH MLTON")
print("Blowup(p) = (MPL(p) space) / (MLton space)")
print(table(tt, defaultAlign))
print("")

header = ["Benchmark", "Time(1)", "Time({})".format(maxp), "Space(1)", "Space({})".format(maxp)]
tt = [header, "="]
for tag in orderedTags:
  # tMLton = tm(averageTime(D, 'mlton', tag, 1))
  tMPL1 = tm(averageTime(D, 'mpl', tag, 1))
  tMPLp = tm(averageTime(D, 'mpl', tag, maxp))
  tMPLcc1 = tm(averageTime(D, 'mpl-cc', tag, 1))
  tMPLccp = tm(averageTime(D, 'mpl-cc', tag, maxp))
  # rMLton = averageSpace(D, 'mlton', tag, 1)
  rMPL1 = averageSpace(D, 'mpl', tag, 1)
  rMPLp = averageSpace(D, 'mpl', tag, maxp)
  rMPLcc1 = averageSpace(D, 'mpl-cc', tag, 1)
  rMPLccp = averageSpace(D, 'mpl-cc', tag, maxp)

  t1 = pcd(tMPLcc1, tMPL1)
  tp = pcd(tMPLccp, tMPLp)
  r1 = pcd(rMPLcc1, rMPL1)
  rp = pcd(rMPLccp, rMPLp)

  row = [tag, t1, tp, r1, rp]
  row = [x if x is not None else "--" for x in row]
  tt.append(row)

print("MPL/CC versus MPL")
print(table(tt, defaultAlign))
print("")

print("[INFO] done reporting {} and {}".format(timingsFile, workingSetFile))
